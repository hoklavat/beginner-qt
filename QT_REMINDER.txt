*** QT FRAMEWORK ***

* Definition: Qt is cross-platform application development framework for desktop, embedded and mobile.
* Supported Platforms: Linux, OS X, Windows, VxWorks, QNX, Android, iOS, BlackBerry, Sailfish OS, ...
* QTCreator: integrated development environment (IDE) for Qt applications.
* Qt Designer: interactive graphical tool which functions as code generator for widgets based GUIs. integrated into QTCreator.
* QMake: cross-platform frontend for platform-native build systems. it automates generation of make files that describes compilation process. (qmake [mode] [options] files)
* Qt Resource System: platform-independent mechanism for storing binary files (icons, translation files, images, ...) in application's executable.
* QML: declarative object description language that integrates Javascript for procedural programming.
* MOC: meta-object compiler. preprocessor that parses source files written in Qt-extended C++ and generates standard compliant C++ sources from them.
* UIC: user interface compiler. processes ui files.
* Parenting System: any object that inherits from QObject can have parent and children.
* Observer Pattern: observable object wants to notify observing objects about state change. example: callback, listener.
* Signal: message that object can send, most of time to inform of status change. example: clicked, pressed, released, ...
* Slot: function that is used to accept and respond to signal. slot must be connected to signal via QObject::connect() method. example: quit, setEnabled, setText, ...
   - QObject::Connect(Sender, SIGNAL(sendSignal), Receiver, SLOT(setState))
* Signal Relaying: signal is connected to signal. secon signal is sent if firs signal is sent.
* Window Layout: usually child widgets are arranged inside window using layout objects rather than by specifying positions and sizes explicitly. it manages positions and sizes of widgets supplied to it.
* Model/View Architecture: manage relationship between data and the way it is presented to user. Model/View/Delegate classes.
* Model-View-Controller: MVC. design pattern originating from Smalltalk that is often used when building user interfaces. model is application object,  view is its screen presentation, controller defines way ui reacts to user input.
* Model: provides standard interface that views and delegates use to access data. QAbstractItemModel. List/Table/Tree.
* Model Index: represents each piece of information that can be obtained via model. views and delegates use these index to request items of data to display. QModelIndex, QPersistentModelIndex.
* View: obtains items of data from model and presents them to user. QAbstractItemView.
* Delegate: allows flexibility in intearaction while obtaining input from user. QAbstractItemDelegate. QStyledItemDelegate.
* Selection Model: used in item view classes provides general description of selections based on facilities of model/view architecture. QItemSelectionModel.

[PROJECT FILE]
* Project File (.pro): used by qmake to generate make files that contain all commands that are needed to build each project.
* Resource File (.qrc): XML-based file that lists references to resources associated with application.
* Source File (.cpp)
* Header File (.h)
* UI Form File (.ui)
* Comment
* Variables
* Control Structures
* Built-In Functions
* Libraries
* Project Templates
* Platform Specification

[META-OBJECT SYSTEM]
* Paradigms: Introspection, Asynchronous Function Calls.
* Introspection: examining type at run-time.
* MOC produces code that includes signals and slots signatures, methods for meta-information retrieval, properties handling.
   - const QMetaObject *QObject::metaObject() const
* Q_OBJECT macro marks class as it is interpretable by MOC.
* SIGNAL macro specifies signatures of signals.
* SLOT macro specifies slots corresponding to signals.

[MODULES]
* QTWidget: provides set of UI elements to create classic desktop-style user interfaces.
* QTQuick:  provides all basic types necessary for creating user interfaces with QML.

[LAYOUTS]
* QHBoxLayout: horizontal layout.
* QVBoxLayout: vertical layout.
* QGridLayout: grid layout.
* QFormLayout: form layout.

[MODELS]
* QStringListModel: used to store simple list of QString items.
* QStandardItemModel: manages complex tree structures of items, each of which can contain arbitrary data.
* QFileSystemModel: provides information about files and directories in local filing system.
* QSqlQueryModel/QSqlTableModel/QSqlRelationalTableModel: used to access databases using model/view conventions.
* QAbstractItemModel/QAbstractListModel/QAbstractTableModel: interfaces to create custom model classes.
* QItemSelectionModel: mechanism for handling selections of items within views. selectionModel(), setSelectionModel().

[VIEWS]
* QListView: displays list of items.
* QTableView: displays data from model in table.
* QTreeView: shows model items of data in hierarchical list.
* QAbstractItemView: interface for all view classes.
* QHeaderView:retrieve data from model using QAbstractItemModel::headerData() function, and display header information in form of label.
* Convenience Classes: QListWidget, QTreeWidget, QTableWidget.

[DELEGATES]
* QAbstractItemDelegate: abstract base class for delegates in model/view framework.
* QStyledItemDelegate: used as default delegate by Qt standard views. uses current style to paint its items.
* QItemDelegate: alternative to QStyledItemDelegate except, it doesn't use current style to paint its items.

[NOTES]
* Most basic class is QObject. object name, parenting system, signals, slots, event management, ...
* Nearly all graphical elements are inherited from QWidget class.
* Signal can be connected to several slots.
* Many signals can be connected to single slot.
